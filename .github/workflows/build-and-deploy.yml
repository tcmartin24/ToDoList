name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dockerized

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Cache .NET dependencies
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/ToDoList-API/ToDoList-API.csproj', '**/ToDoList-API-Tests/ToDoList-API-Tests.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        if: steps.cache-dotnet-deps.outputs.cache-hit != 'true'
        run: |
          dotnet restore ./ToDoList-API/ToDoList-API.csproj
          dotnet restore ./ToDoList-API-Tests/ToDoList-API-Tests.csproj

      - name: Cache .NET build
        uses: actions/cache@v2
        with:
          path: |
            **/bin
            **/obj
          key: ${{ runner.os }}-dotnet-build-${{ hashFiles('**/ToDoList-API/**/*.cs', '**/ToDoList-API/ToDoList-API.csproj') }}

      - name: Build .NET project for API
        if: steps.cache-dotnet-build.outputs.cache-hit != 'true'
        run: dotnet build --configuration Release --no-restore ./ToDoList-API/ToDoList-API.csproj

      - name: Run tests for API
        run: dotnet test --no-restore --verbosity normal ./ToDoList-API-Tests/ToDoList-API-Tests.csproj

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'

      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ./todo-list-react/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./todo-list-react/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies for React app
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ./todo-list-react

      - name: Run tests for React app
        run: npm test
        working-directory: ./todo-list-react

  package-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers for API
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-api
          key: ${{ runner.os }}-buildx-api-${{ hashFiles('ToDoList-API/**/*', 'ToDoList-API/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-api-

      - name: Build and push ToDoList-API Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ToDoList-API/Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/todolist-api:latest
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new

      - name: Move API cache
        run: |
          rm -rf /tmp/.buildx-cache-api
          mv /tmp/.buildx-cache-api-new /tmp/.buildx-cache-api

      - name: Cache Docker layers for React app
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-react
          key: ${{ runner.os }}-buildx-react-${{ hashFiles('todo-list-react/**/*', 'todo-list-react/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-react-

      - name: Build and push todo-list-react Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./todo-list-react
          file: ./todo-list-react/Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/todo-list-react:latest
          cache-from: type=local,src=/tmp/.buildx-cache-react
          cache-to: type=local,dest=/tmp/.buildx-cache-react-new

      - name: Move React cache
        run: |
          rm -rf /tmp/.buildx-cache-react
          mv /tmp/.buildx-cache-react-new /tmp/.buildx-cache-react

  deploy-infrastructure:
    needs: package-and-push
    runs-on: ubuntu-latest
    outputs:
      webAppName: ${{ steps.bicep-deploy.outputs.webAppName }}
      keyVaultName: ${{ steps.bicep-deploy.outputs.keyVaultName }}
      sqlServerName: ${{ steps.bicep-deploy.outputs.sqlServerName }}
      sqlDatabaseName: ${{ steps.bicep-deploy.outputs.sqlDatabaseName }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep template
        id: bicep-deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: ./azure/main.bicep
          parameters: >
            environment=dev 
            appName=todolist 
            objectId=${{ secrets.AZURE_AD_OBJECT_ID }}
            acrLoginServer=${{ secrets.ACR_LOGIN_SERVER }}
            acrUsername=${{ secrets.ACR_USERNAME }}
            acrPassword=${{ secrets.ACR_PASSWORD }}
          failOnStdErr: false

      - name: Output Bicep deployment results
        run: |
          echo "Web App Name: ${{ steps.bicep-deploy.outputs.webAppName }}"
          echo "Key Vault Name: ${{ steps.bicep-deploy.outputs.keyVaultName }}"
          echo "SQL Server Name: ${{ steps.bicep-deploy.outputs.sqlServerName }}"
          echo "SQL Database Name: ${{ steps.bicep-deploy.outputs.sqlDatabaseName }}"
          
  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Update Azure Web App with New Images
        env:
          WEBAPP_NAME: ${{ needs.deploy-infrastructure.outputs.webAppName }}
        run: |
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}"
          
          # Create the multi-container config
          CONTAINER_CONFIG=$(cat << EOF
          [
            {
              "name": "frontend",
              "image": "${ACR_LOGIN_SERVER}/todo-list-react:latest"
            },
            {
              "name": "backend",
              "image": "${ACR_LOGIN_SERVER}/todolist-api:latest"
            }
          ]
          EOF
          )

          # Encode the config to base64
          ENCODED_CONFIG=$(echo "$CONTAINER_CONFIG" | base64 -w 0)
          
          # Update the web app configuration
          az webapp config container set \
            --name "$WEBAPP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --multicontainer-config-type COMPOSE \
            --multicontainer-config-file "$ENCODED_CONFIG"

      - name: Verify Web App Configuration
        env:
          WEBAPP_NAME: ${{ needs.deploy-infrastructure.outputs.webAppName }}
        run: |
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          
          echo "Fetching Web App configuration..."
          az webapp config container show --name "$WEBAPP_NAME" --resource-group "$RESOURCE_GROUP"